

=== ./serializer.py ===
# ./operadores/serializer.py

from rest_framework import serializers
from .models import (
    Operador, OperadorBodega, OperadorEmpresaModulo, 
    OperadorEmpresaModuloMenu, OperadorGrupo, OperadorPuntoVenta,
    Sesion, SesionActiva
)
from dm_logistica.models import Proveedor  # ← añadimos import

class OperadorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Operador
        fields = '__all__'

class OperadorBodegaSerializer(serializers.ModelSerializer):
    class Meta:
        model = OperadorBodega
        fields = '__all__'

class OperadorEmpresaModuloSerializer(serializers.ModelSerializer):
    class Meta:
        model = OperadorEmpresaModulo
        fields = '__all__'

class OperadorEmpresaModuloMenuSerializer(serializers.ModelSerializer):
    class Meta:
        model = OperadorEmpresaModuloMenu
        fields = '__all__'

class OperadorGrupoSerializer(serializers.ModelSerializer):
    class Meta:
        model = OperadorGrupo
        fields = '__all__'

class OperadorPuntoVentaSerializer(serializers.ModelSerializer):
    class Meta:
        model = OperadorPuntoVenta
        fields = '__all__'

class SesionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Sesion
        fields = '__all__'

class SesionActivaSerializer(serializers.ModelSerializer):
    class Meta:
        model = SesionActiva
        fields = '__all__'

# ─────────────────────────────────────────────────────────────────────────────
# NUEVO: Serializer para Proveedor
# ─────────────────────────────────────────────────────────────────────────────
class ProveedorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Proveedor
        fields = '__all__'


=== ./admin.py ===
from django.contrib import admin

# Register your models here.


=== ./urls.py ===
# ./operadores/urls.py

from django.urls import path, include
from rest_framework import routers
from rest_framework.documentation import include_docs_urls

from .views import (
    OperadorViewSet, OperadorBodegaViewSet,
    OperadorEmpresaModuloViewSet, OperadorEmpresaModuloMenuViewSet,
    OperadorGrupoViewSet, OperadorPuntoVentaViewSet,
    SesionViewSet, SesionActivaViewSet,
    OperadorByTokenViewSet,
    ProveedorEmpresaViewSet      # ← ya registrado
)

router = routers.DefaultRouter()
router.register(r'operadores', OperadorViewSet, basename='operadores')
router.register(r'operadores-bodegas', OperadorBodegaViewSet, basename='operadores-bodegas')
router.register(r'operadores-empresa-modulos', OperadorEmpresaModuloViewSet, basename='operadores-empresa-modulos')
router.register(r'operadores-empresa-modulos-menus', OperadorEmpresaModuloMenuViewSet, basename='operadores-empresa-modulos-menus')
router.register(r'operadores-grupos', OperadorGrupoViewSet, basename='operadores-grupos')
router.register(r'operadores-punto-venta', OperadorPuntoVentaViewSet, basename='operadores-punto-venta')
router.register(r'sesiones', SesionViewSet, basename='sesiones')
router.register(r'sesiones-activas', SesionActivaViewSet, basename='sesiones-activas')
router.register(r'proveedores-empresa', ProveedorEmpresaViewSet, basename='proveedores-empresa')  # ← nueva ruta

urlpatterns = [
    path('', include(router.urls)),
    path('docs/', include_docs_urls(title='Operadores API')),
    path('sesiones-activas-token/',
         OperadorByTokenViewSet.as_view({'get': 'get_by_cookie'}),
         name='sesiones-activas-token-cookie'),
    path('logout/',
         OperadorViewSet.as_view({'get': 'logout'}),
         name='logout'),
]


=== ./__init__.py ===


=== ./migrations/__init__.py ===


=== ./migrations/0007_alter_operador_id_empresa_alter_operador_id_grupo.py ===
# Generated by Django 5.1.7 on 2025-04-17 14:42

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('coreempresas', '0003_remove_empresaparam_idx_empresa_param_campo'),
        ('operadores', '0006_alter_operador_unique_together_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='operador',
            name='id_empresa',
            field=models.ForeignKey(db_column='id_empresa', on_delete=django.db.models.deletion.RESTRICT, related_name='operadores', to='coreempresas.empresa'),
        ),
        migrations.AlterField(
            model_name='operador',
            name='id_grupo',
            field=models.ForeignKey(blank=True, db_column='id_grupo', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='operadores', to='coreempresas.grupo'),
        ),
    ]


=== ./migrations/0001_initial.py ===
# Generated by Django 5.1.7 on 2025-03-28 13:21

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('configuracion', '0001_initial'),
        ('coreempresas', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Operador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operador_id', models.CharField(max_length=50)),
                ('password', models.CharField(default='', max_length=80)),
                ('clear', models.CharField(blank=True, max_length=80, null=True)),
                ('rut', models.CharField(blank=True, max_length=15, null=True)),
                ('nombres', models.CharField(blank=True, max_length=100, null=True)),
                ('apellido_paterno', models.CharField(blank=True, max_length=100, null=True)),
                ('apellido_materno', models.CharField(blank=True, max_length=100, null=True)),
                ('modificable', models.IntegerField(default=1)),
                ('email', models.CharField(blank=True, max_length=50, null=True)),
                ('estado', models.IntegerField(default=1)),
                ('acceso_web', models.IntegerField(default=0)),
                ('conexion_fallida', models.IntegerField(default=0)),
                ('operador_administrador', models.CharField(default='0', max_length=50)),
                ('superadmin', models.IntegerField(default=0)),
                ('fecha_creacion', models.DateTimeField(default=django.utils.timezone.now)),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operadores', to='coreempresas.empresa')),
                ('grupo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='operadores', to='coreempresas.grupo')),
            ],
            options={
                'db_table': '"dm_sistema"."operador"',
            },
        ),
        migrations.CreateModel(
            name='OperadorBodega',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bodega_id', models.IntegerField()),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operador_bodegas', to='coreempresas.empresa')),
                ('operador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bodegas', to='operadores.operador')),
            ],
            options={
                'db_table': '"dm_sistema"."operador_bodega"',
            },
        ),
        migrations.CreateModel(
            name='OperadorEmpresaModulo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('empresa_modulo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='configuracion.empresamodulo')),
                ('operador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='empresa_modulos', to='operadores.operador')),
            ],
            options={
                'db_table': '"dm_sistema"."operador_empresa_modulos"',
            },
        ),
        migrations.CreateModel(
            name='OperadorEmpresaModuloMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('empresa_modulo_menu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='configuracion.empresamodulomenu')),
                ('operador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='empresa_modulos_menus', to='operadores.operador')),
            ],
            options={
                'db_table': '"dm_sistema"."operador_empresa_modulos_menu"',
            },
        ),
        migrations.CreateModel(
            name='OperadorGrupo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grupo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operadores_grupo', to='coreempresas.grupo')),
                ('operador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grupos_operador', to='operadores.operador')),
            ],
            options={
                'db_table': '"dm_sistema"."operador_grupos"',
            },
        ),
        migrations.CreateModel(
            name='OperadorPuntoVenta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('punto_venta_id', models.IntegerField()),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operador_punto_ventas', to='coreempresas.empresa')),
                ('operador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='puntos_venta', to='operadores.operador')),
            ],
            options={
                'db_table': '"dm_sistema"."operador_punto_venta"',
            },
        ),
        migrations.CreateModel(
            name='Sesion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.CharField(max_length=20)),
                ('fecha', models.DateTimeField()),
                ('operador_id', models.CharField(max_length=50)),
                ('empresa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='coreempresas.empresa')),
            ],
            options={
                'db_table': '"dm_sistema"."sesiones"',
            },
        ),
        migrations.CreateModel(
            name='SesionActiva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operador_id', models.CharField(blank=True, max_length=50, null=True)),
                ('sesion_id', models.CharField(blank=True, max_length=255, null=True)),
                ('fecha_registro', models.DateTimeField(default=django.utils.timezone.now)),
                ('empresa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='coreempresas.empresa')),
            ],
            options={
                'db_table': '"dm_sistema"."sesiones_activas"',
            },
        ),
        migrations.CreateModel(
            name='SesionEjecutivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateTimeField()),
                ('id_ejecutivo', models.IntegerField()),
                ('rut_ejecutivo', models.CharField(blank=True, max_length=50, null=True)),
                ('id_operador', models.CharField(blank=True, max_length=50, null=True)),
                ('portal', models.CharField(blank=True, max_length=255, null=True)),
                ('ip', models.CharField(blank=True, max_length=50, null=True)),
                ('id_empresa', models.ForeignKey(blank=True, db_column='id_empresa', null=True, on_delete=django.db.models.deletion.CASCADE, to='coreempresas.empresa')),
            ],
            options={
                'db_table': '"dm_sistema"."sesiones_ejecutivos"',
            },
        ),
        migrations.AddIndex(
            model_name='operador',
            index=models.Index(fields=['empresa'], name='idx_opr_emp_id'),
        ),
        migrations.AddIndex(
            model_name='operador',
            index=models.Index(fields=['grupo'], name='idx_opr_grp_id'),
        ),
        migrations.AlterUniqueTogether(
            name='operador',
            unique_together={('operador_id', 'empresa')},
        ),
        migrations.AddIndex(
            model_name='operadorbodega',
            index=models.Index(fields=['bodega_id'], name='idx_opbdg_bdg_id'),
        ),
        migrations.AddIndex(
            model_name='operadorbodega',
            index=models.Index(fields=['empresa'], name='idx_opbdg_emp_id'),
        ),
        migrations.AddIndex(
            model_name='operadorempresamodulo',
            index=models.Index(fields=['operador'], name='idx_oem_opr_id'),
        ),
        migrations.AddIndex(
            model_name='operadorempresamodulo',
            index=models.Index(fields=['empresa_modulo'], name='idx_oem_em_id'),
        ),
        migrations.AddIndex(
            model_name='operadorempresamodulomenu',
            index=models.Index(fields=['operador'], name='idx_oemm_opr_id'),
        ),
        migrations.AddIndex(
            model_name='operadorempresamodulomenu',
            index=models.Index(fields=['empresa_modulo_menu'], name='idx_oemm_mm_id'),
        ),
        migrations.AlterUniqueTogether(
            name='operadorgrupo',
            unique_together={('operador', 'grupo')},
        ),
        migrations.AddIndex(
            model_name='operadorpuntoventa',
            index=models.Index(fields=['empresa'], name='idx_opv_emp_id'),
        ),
        migrations.AddIndex(
            model_name='sesionactiva',
            index=models.Index(fields=['sesion_id'], name='idx_sact_sid'),
        ),
        migrations.AddIndex(
            model_name='sesionactiva',
            index=models.Index(fields=['empresa'], name='idx_sact_emp_id'),
        ),
        migrations.AddIndex(
            model_name='sesionejecutivo',
            index=models.Index(fields=['fecha'], name='idx_seseje_fecha'),
        ),
        migrations.AddIndex(
            model_name='sesionejecutivo',
            index=models.Index(fields=['portal'], name='idx_seseje_portal'),
        ),
    ]


=== ./migrations/0005_remove_operador_idx_opr_emp_id_and_more.py ===
# operadores/migrations/0005_remove_operador_idx_opr_emp_id_and_more.py
# -----------------------------------------------------------------------------
# Corrige definitivamente el error:
#     psycopg2.errors.DuplicateTable: relation "idx_opr_emp_id" already exists
#
# Idea clave → antes de recrear los índices eliminamos *cualquier* rastro
# del nombre, tanto en el esquema «dm_sistema» como en el search_path por
# defecto, de modo que AddIndex ya no colisione.
# -----------------------------------------------------------------------------

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("configuracion", "0002_remove_empresamodulo_empresa_and_more"),
        ("coreempresas",
         "0002_remove_empresaparam_idx_empresa_param_empresa_id_and_more"),
        ("operadores", "0004_delete_sesionejecutivo"),
    ]

    operations = [
        # ------------------------------------------------------------------ #
        # 0.  **NUEVO:** limpia cualquier índice huérfano antes de todo.     #
        # ------------------------------------------------------------------ #
        migrations.RunSQL(
            sql="""
                DO $$
                DECLARE
                    idxname text := 'idx_opr_emp_id';
                BEGIN
                    -- en el esquema específico
                    EXECUTE format(
                        'DROP INDEX IF EXISTS %I.%I',
                        'dm_sistema', idxname
                    );
                    -- y en search_path
                    EXECUTE format(
                        'DROP INDEX IF EXISTS %I',
                        idxname
                    );
                END$$;
            """,
            reverse_sql=migrations.RunSQL.noop,
        ),

        # ------------------------------------------------------------------ #
        # 1.  Eliminar los índices “antiguos” declarados en 0001_initial.py   #
        # ------------------------------------------------------------------ #
        migrations.RemoveIndex(model_name="operador", name="idx_opr_emp_id"),
        migrations.RemoveIndex(model_name="operador", name="idx_opr_grp_id"),
        migrations.RemoveIndex(model_name="operadorbodega", name="idx_opbdg_bdg_id"),
        migrations.RemoveIndex(model_name="operadorbodega", name="idx_opbdg_emp_id"),
        migrations.RemoveIndex(model_name="operadorempresamodulo", name="idx_oem_opr_id"),
        migrations.RemoveIndex(model_name="operadorempresamodulo", name="idx_oem_em_id"),
        migrations.RemoveIndex(model_name="operadorempresamodulomenu", name="idx_oemm_opr_id"),
        migrations.RemoveIndex(model_name="operadorempresamodulomenu", name="idx_oemm_mm_id"),
        migrations.RemoveIndex(model_name="operadorpuntoventa", name="idx_opv_emp_id"),
        migrations.RemoveIndex(model_name="sesionactiva", name="idx_sact_sid"),
        migrations.RemoveIndex(model_name="sesionactiva", name="idx_sact_emp_id"),

        # ------------------------------------------------------------------ #
        # 2.  Renombrar columnas (idéntico a la versión previa)               #
        # ------------------------------------------------------------------ #
        migrations.RenameField("operador",              "operador_id",     "username"),
        migrations.RenameField("operadorbodega",        "bodega_id",       "id_bodega"),
        migrations.RenameField("operadorpuntoventa",    "punto_venta_id",  "id_punto_venta"),

        # ------------------------------------------------------------------ #
        # 3‑4.  Eliminamos UNIQUE constraints obsoletos                       #
        # ------------------------------------------------------------------ #
        migrations.RunSQL(
            sql="""
                DO $$
                BEGIN
                    IF EXISTS (
                        SELECT 1 FROM pg_constraint
                         WHERE conrelid = '"dm_sistema"."operador"'::regclass
                           AND contype  = 'u'
                           AND conname  = 'operadores_operador_operador_id_empresa_id_uniq'
                    ) THEN
                        ALTER TABLE "dm_sistema"."operador"
                        DROP CONSTRAINT operadores_operador_operador_id_empresa_id_uniq;
                    ELSIF EXISTS (
                        SELECT 1 FROM pg_constraint
                         WHERE conrelid = '"dm_sistema"."operador"'::regclass
                           AND contype  = 'u'
                           AND conname  = 'operadores_operador_username_empresa_id_uniq'
                    ) THEN
                        ALTER TABLE "dm_sistema"."operador"
                        DROP CONSTRAINT operadores_operador_username_empresa_id_uniq;
                    END IF;
                END$$;
            """,
            reverse_sql=migrations.RunSQL.noop,
        ),
        migrations.RunSQL(
            sql="""
                DO $$
                BEGIN
                    IF EXISTS (
                        SELECT 1 FROM pg_constraint
                         WHERE conrelid = '"dm_sistema"."operador_grupos"'::regclass
                           AND contype  = 'u'
                           AND conname  = 'operadores_operadorgr_operador_id_grupo_id_uniq'
                    ) THEN
                        ALTER TABLE "dm_sistema"."operador_grupos"
                        DROP CONSTRAINT operadores_operadorgr_operador_id_grupo_id_uniq;
                    END IF;
                END$$;
            """,
            reverse_sql=migrations.RunSQL.noop,
        ),

        # ------------------------------------------------------------------ #
        # 5.  Limpieza exhaustiva de *todos* los índices potenciales          #
        # ------------------------------------------------------------------ #
        migrations.RunSQL(
            sql="""
                DO $$
                DECLARE
                    idx text;
                BEGIN
                    FOREACH idx IN ARRAY ARRAY[
                        'idx_opr_emp_id','idx_opr_grp_id',
                        'idx_opbdg_bdg_id','idx_opbdg_emp_id','idx_opbdg_opr_id',
                        'idx_oem_opr_id','idx_oem_em_id',
                        'idx_oemm_opr_id','idx_oemm_mm_id',
                        'idx_opgr_opr_id','idx_opgr_grp_id',
                        'idx_opv_emp_id','idx_opv_pv_id','idx_opv_opr_id',
                        'idx_ses_emp_id','idx_ses_opr_id',
                        'idx_sact_sid','idx_sact_emp_id','idx_sact_opr_id'
                    ] LOOP
                        -- en «dm_sistema»
                        EXECUTE format(
                            'DROP INDEX IF EXISTS %I.%I',
                            'dm_sistema', idx
                        );
                        -- y también sin esquema
                        EXECUTE format(
                            'DROP INDEX IF EXISTS %I',
                            idx
                        );
                    END LOOP;
                END$$;
            """,
            reverse_sql=migrations.RunSQL.noop,
        ),

        # ------------------------------------------------------------------ #
        # 6.  Eliminación de FK viejas (sin cambios)                          #
        # ------------------------------------------------------------------ #
        migrations.RemoveField("operadorbodega",            "empresa"),
        migrations.RemoveField("operadorbodega",            "operador"),
        migrations.RemoveField("operadorempresamodulo",     "empresa_modulo"),
        migrations.RemoveField("operadorempresamodulo",     "operador"),
        migrations.RemoveField("operadorempresamodulomenu", "empresa_modulo_menu"),
        migrations.RemoveField("operadorempresamodulomenu", "operador"),
        migrations.RemoveField("operadorpuntoventa",        "empresa"),
        migrations.RemoveField("operadorpuntoventa",        "operador"),
        migrations.RemoveField("sesion",                    "empresa"),
        migrations.RemoveField("sesion",                    "operador_id"),
        migrations.RemoveField("sesionactiva",              "empresa"),
        migrations.RemoveField("sesionactiva",              "operador_id"),
        migrations.RemoveField("sesionactiva",              "sesion_id"),

        # ------------------------------------------------------------------ #
        # 7.  Nuevas FK con prefijo id_… (idéntico a la versión previa)      #
        # ------------------------------------------------------------------ #
        migrations.AddField(
            "operador", "id_empresa",
            models.ForeignKey(
                to="coreempresas.empresa",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operadores",
                default=1,
            ),
        ),
        migrations.AddField(
            "operador", "id_grupo",
            models.ForeignKey(
                to="coreempresas.grupo",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operadores",
                null=True, blank=True,
            ),
        ),
        migrations.AddField(
            "operadorbodega", "id_empresa",
            models.ForeignKey(
                to="coreempresas.empresa",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_bodegas",
                default=1,
            ),
        ),
        migrations.AddField(
            "operadorbodega", "id_operador",
            models.ForeignKey(
                to="operadores.operador",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="bodegas",
                default=1,
            ),
        ),
        migrations.AddField(
            "operadorempresamodulo", "id_empresa_modulo",
            models.ForeignKey(
                to="configuracion.empresamodulo",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_empresa_modulos",
                default=1,
            ),
        ),
        migrations.AddField(
            "operadorempresamodulo", "id_operador",
            models.ForeignKey(
                to="operadores.operador",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_empresa_modulos",
                default=1,
            ),
        ),
        migrations.AddField(
            "operadorempresamodulomenu", "id_empresa_modulo_menu",
            models.ForeignKey(
                to="configuracion.empresamodulomenu",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_empresa_modulos_menus",
                default=1,
            ),
        ),
        migrations.AddField(
            "operadorempresamodulomenu", "id_operador",
            models.ForeignKey(
                to="operadores.operador",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_empresa_modulos_menus",
                default=1,
            ),
        ),
        migrations.AddField(
            "operadorgrupo", "id_grupo",
            models.ForeignKey(
                to="coreempresas.grupo",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operadores_grupo",
                default=1,
            ),
        ),
        migrations.AddField(
            "operadorgrupo", "id_operador",
            models.ForeignKey(
                to="operadores.operador",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operadores_grupo",
                default=1,
            ),
        ),
        migrations.AddField(
            "operadorpuntoventa", "id_empresa",
            models.ForeignKey(
                to="coreempresas.empresa",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_puntos_ventas",
                default=1,
            ),
        ),
        migrations.AddField(
            "operadorpuntoventa", "id_operador",
            models.ForeignKey(
                to="operadores.operador",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_puntos_venta",
                default=1,
            ),
        ),
        migrations.AddField(
            "sesion", "id_empresa",
            models.ForeignKey(
                to="coreempresas.empresa",
                on_delete=django.db.models.deletion.RESTRICT,
                null=True, blank=True,
            ),
        ),
        migrations.AddField(
            "sesion", "id_operador",
            models.ForeignKey(
                to="operadores.operador",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="sesion",
                default=1,
            ),
        ),
        migrations.AddField(
            "sesionactiva", "id_empresa",
            models.ForeignKey(
                to="coreempresas.empresa",
                on_delete=django.db.models.deletion.RESTRICT,
                null=True, blank=True,
            ),
        ),
        migrations.AddField(
            "sesionactiva", "id_operador",
            models.ForeignKey(
                to="operadores.operador",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="sesion_activa",
                default=1,
            ),
        ),
        migrations.AddField(
            "sesionactiva", "id_sesion",
            models.ForeignKey(
                to="operadores.sesion",
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="sesion_activa",
                default=1,
            ),
        ),

        # ------------------------------------------------------------------ #
        # 8.  Ajuste de AutoField → columnas reales                           #
        # ------------------------------------------------------------------ #
        migrations.AlterField("operador",                 "id",
                              models.AutoField(primary_key=True, db_column="id_operador")),
        migrations.AlterField("operadorbodega",           "id",
                              models.AutoField(primary_key=True, db_column="id_operador_bodega")),
        migrations.AlterField("operadorempresamodulo",    "id",
                              models.AutoField(primary_key=True, db_column="id_operador_empresa_modulo")),
        migrations.AlterField("operadorempresamodulomenu","id",
                              models.AutoField(primary_key=True, db_column="id_operador_empresa_modulo_menu")),
        migrations.AlterField("operadorgrupo",            "id",
                              models.AutoField(primary_key=True, db_column="id_operador_grupo")),
        migrations.AlterField("operadorpuntoventa",       "id",
                              models.AutoField(primary_key=True, db_column="id_operador_punto_venta")),
        migrations.AlterField("sesion",                   "id",
                              models.AutoField(primary_key=True, db_column="id_sesion")),
        migrations.AlterField("sesionactiva",             "id",
                              models.AutoField(primary_key=True, db_column="id_sesion_activa")),

        # ------------------------------------------------------------------ #
        # 9.  Re‑crear los índices con los nombres definitivos               #
        # ------------------------------------------------------------------ #
        migrations.AddIndex("operador",
            models.Index(fields=["id_empresa"], name="idx_opr_emp_id")),
        migrations.AddIndex("operador",
            models.Index(fields=["id_grupo"],   name="idx_opr_grp_id")),
        migrations.AddIndex("operadorbodega",
            models.Index(fields=["id_bodega"],  name="idx_opbdg_bdg_id")),
        migrations.AddIndex("operadorbodega",
            models.Index(fields=["id_empresa"], name="idx_opbdg_emp_id")),
        migrations.AddIndex("operadorbodega",
            models.Index(fields=["id_operador"], name="idx_opbdg_opr_id")),
        migrations.AddIndex("operadorempresamodulo",
            models.Index(fields=["id_operador"],        name="idx_oem_opr_id")),
        migrations.AddIndex("operadorempresamodulo",
            models.Index(fields=["id_empresa_modulo"],  name="idx_oem_em_id")),
        migrations.AddIndex("operadorempresamodulomenu",
            models.Index(fields=["id_operador"],            name="idx_oemm_opr_id")),
        migrations.AddIndex("operadorempresamodulomenu",
            models.Index(fields=["id_empresa_modulo_menu"], name="idx_oemm_mm_id")),
        migrations.AddIndex("operadorgrupo",
            models.Index(fields=["id_operador"], name="idx_opgr_opr_id")),
        migrations.AddIndex("operadorgrupo",
            models.Index(fields=["id_grupo"],    name="idx_opgr_grp_id")),
        migrations.AddIndex("operadorpuntoventa",
            models.Index(fields=["id_empresa"],     name="idx_opv_emp_id")),
        migrations.AddIndex("operadorpuntoventa",
            models.Index(fields=["id_punto_venta"], name="idx_opv_pv_id")),
        migrations.AddIndex("operadorpuntoventa",
            models.Index(fields=["id_operador"],    name="idx_opv_opr_id")),
        migrations.AddIndex("sesion",
            models.Index(fields=["id_empresa"],  name="idx_ses_emp_id")),
        migrations.AddIndex("sesion",
            models.Index(fields=["id_operador"], name="idx_ses_opr_id")),
        migrations.AddIndex("sesionactiva",
            models.Index(fields=["id_sesion"],   name="idx_sact_sid")),
        migrations.AddIndex("sesionactiva",
            models.Index(fields=["id_empresa"],  name="idx_sact_emp_id")),
        migrations.AddIndex("sesionactiva",
            models.Index(fields=["id_operador"], name="idx_sact_opr_id")),
    ]


=== ./migrations/0002_sesionactiva_token.py ===
# Generated by Django 5.1.7 on 2025-03-31 14:41

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('operadores', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='sesionactiva',
            name='token',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
    ]


=== ./migrations/0003_sesionactiva_cod_verificacion.py ===
# Generated by Django 5.1.7 on 2025-04-01 18:06

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('operadores', '0002_sesionactiva_token'),
    ]

    operations = [
        migrations.AddField(
            model_name='sesionactiva',
            name='cod_verificacion',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
    ]


=== ./migrations/0008_alter_operadorbodega_id_empresa_and_more.py ===
# Generated by Django 5.1.7 on 2025-04-17 14:53

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('configuracion', '0004_alter_empresamodulomenu_id_empresa_modulo_and_more'),
        ('coreempresas', '0004_alter_empresaparam_id_empresa_and_more'),
        ('operadores', '0007_alter_operador_id_empresa_alter_operador_id_grupo'),
    ]

    operations = [
        migrations.AlterField(
            model_name='operadorbodega',
            name='id_empresa',
            field=models.ForeignKey(db_column='id_empresa', on_delete=django.db.models.deletion.RESTRICT, related_name='operador_bodegas', to='coreempresas.empresa'),
        ),
        migrations.AlterField(
            model_name='operadorbodega',
            name='id_operador',
            field=models.ForeignKey(db_column='id_operador', on_delete=django.db.models.deletion.RESTRICT, related_name='bodegas', to='operadores.operador'),
        ),
        migrations.AlterField(
            model_name='operadorempresamodulo',
            name='id_empresa_modulo',
            field=models.ForeignKey(db_column='id_empresa_modulo', on_delete=django.db.models.deletion.RESTRICT, related_name='operador_empresa_modulos', to='configuracion.empresamodulo'),
        ),
        migrations.AlterField(
            model_name='operadorempresamodulo',
            name='id_operador',
            field=models.ForeignKey(db_column='id_operador', on_delete=django.db.models.deletion.RESTRICT, related_name='operador_empresa_modulos', to='operadores.operador'),
        ),
        migrations.AlterField(
            model_name='operadorempresamodulomenu',
            name='id_empresa_modulo_menu',
            field=models.ForeignKey(db_column='id_empresa_modulo_menu', on_delete=django.db.models.deletion.RESTRICT, related_name='operador_empresa_modulos_menus', to='configuracion.empresamodulomenu'),
        ),
        migrations.AlterField(
            model_name='operadorempresamodulomenu',
            name='id_operador',
            field=models.ForeignKey(db_column='id_operador', on_delete=django.db.models.deletion.RESTRICT, related_name='operador_empresa_modulos_menus', to='operadores.operador'),
        ),
        migrations.AlterField(
            model_name='operadorgrupo',
            name='id_grupo',
            field=models.ForeignKey(db_column='id_grupo', on_delete=django.db.models.deletion.RESTRICT, related_name='operadores_grupo', to='coreempresas.grupo'),
        ),
        migrations.AlterField(
            model_name='operadorgrupo',
            name='id_operador',
            field=models.ForeignKey(db_column='id_operador', on_delete=django.db.models.deletion.RESTRICT, related_name='operadores_grupo', to='operadores.operador'),
        ),
        migrations.AlterField(
            model_name='operadorpuntoventa',
            name='id_empresa',
            field=models.ForeignKey(db_column='id_empresa', on_delete=django.db.models.deletion.RESTRICT, related_name='operador_puntos_ventas', to='coreempresas.empresa'),
        ),
        migrations.AlterField(
            model_name='operadorpuntoventa',
            name='id_operador',
            field=models.ForeignKey(db_column='id_operador', on_delete=django.db.models.deletion.RESTRICT, related_name='operador_puntos_venta', to='operadores.operador'),
        ),
        migrations.AlterField(
            model_name='sesion',
            name='id_empresa',
            field=models.ForeignKey(blank=True, db_column='id_empresa', null=True, on_delete=django.db.models.deletion.RESTRICT, to='coreempresas.empresa'),
        ),
        migrations.AlterField(
            model_name='sesion',
            name='id_operador',
            field=models.ForeignKey(db_column='id_operador', on_delete=django.db.models.deletion.RESTRICT, related_name='sesion', to='operadores.operador'),
        ),
        migrations.AlterField(
            model_name='sesionactiva',
            name='id_empresa',
            field=models.ForeignKey(blank=True, db_column='id_empresa', null=True, on_delete=django.db.models.deletion.RESTRICT, to='coreempresas.empresa'),
        ),
        migrations.AlterField(
            model_name='sesionactiva',
            name='id_operador',
            field=models.ForeignKey(db_column='id_operador', on_delete=django.db.models.deletion.RESTRICT, related_name='sesion_activa', to='operadores.operador'),
        ),
        migrations.AlterField(
            model_name='sesionactiva',
            name='id_sesion',
            field=models.ForeignKey(db_column='id_sesion', on_delete=django.db.models.deletion.RESTRICT, related_name='sesion_activa', to='operadores.sesion'),
        ),
    ]


=== ./migrations/0006_alter_operador_unique_together_and_more.py ===
# operadores/migrations/0006_alter_operador_unique_together_and_more.py
# -----------------------------------------------------------------------------
# Esta versión evita el error:
#   ValueError: Found wrong number (0) of constraints for "dm_sistema"."operador"
#               (username, empresa_id)
#
# ¿Qué cambia?
#   • Las dos operaciones `AlterUniqueTogether` se convierten en una única
#     operación `SeparateDatabaseAndState` que **solo** actúa sobre el *state*;
#     no hay modificación real en la base de datos, porque los constraints
#     ya fueron eliminados en la migración 0005 mediante SQL explícito.
#   • El resto del archivo se mantiene idéntico (AlterField, RemoveField, etc.).
# -----------------------------------------------------------------------------

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("configuracion", "0002_remove_empresamodulo_empresa_and_more"),
        ("coreempresas", "0003_remove_empresaparam_idx_empresa_param_campo"),
        ("operadores",  "0005_remove_operador_idx_opr_emp_id_and_more"),
    ]

    operations = [
        # ------------------------------------------------------------------ #
        # 1.  Actualizamos SOLO el estado para quitar unique_together         #
        # ------------------------------------------------------------------ #
        migrations.SeparateDatabaseAndState(
            database_operations=[],
            state_operations=[
                migrations.AlterUniqueTogether(
                    name="operador",
                    unique_together=set(),
                ),
                migrations.AlterUniqueTogether(
                    name="operadorgrupo",
                    unique_together=set(),
                ),
            ],
        ),

        # ------------------------------------------------------------------ #
        # 2.  AlterField → columnas reales, y demás cambios previstos         #
        # ------------------------------------------------------------------ #
        migrations.AlterField(
            model_name="operador",
            name="id",
            field=models.AutoField(db_column="id_operador", primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="operador",
            name="id_empresa",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operadores",
                to="coreempresas.empresa",
            ),
        ),
        migrations.AlterField(
            model_name="operadorbodega",
            name="id",
            field=models.AutoField(db_column="id_operador_bodega", primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="operadorbodega",
            name="id_empresa",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_bodegas",
                to="coreempresas.empresa",
            ),
        ),
        migrations.AlterField(
            model_name="operadorbodega",
            name="id_operador",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="bodegas",
                to="operadores.operador",
            ),
        ),
        migrations.AlterField(
            model_name="operadorempresamodulo",
            name="id",
            field=models.AutoField(db_column="id_operador_empresa_modulo", primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="operadorempresamodulo",
            name="id_empresa_modulo",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_empresa_modulos",
                to="configuracion.empresamodulo",
            ),
        ),
        migrations.AlterField(
            model_name="operadorempresamodulo",
            name="id_operador",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_empresa_modulos",
                to="operadores.operador",
            ),
        ),
        migrations.AlterField(
            model_name="operadorempresamodulomenu",
            name="id",
            field=models.AutoField(db_column="id_operador_empresa_modulo_menu", primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="operadorempresamodulomenu",
            name="id_empresa_modulo_menu",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_empresa_modulos_menus",
                to="configuracion.empresamodulomenu",
            ),
        ),
        migrations.AlterField(
            model_name="operadorempresamodulomenu",
            name="id_operador",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_empresa_modulos_menus",
                to="operadores.operador",
            ),
        ),
        migrations.AlterField(
            model_name="operadorgrupo",
            name="id",
            field=models.AutoField(db_column="id_operador_grupo", primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="operadorgrupo",
            name="id_grupo",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operadores_grupo",
                to="coreempresas.grupo",
            ),
        ),
        migrations.AlterField(
            model_name="operadorgrupo",
            name="id_operador",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operadores_grupo",
                to="operadores.operador",
            ),
        ),
        migrations.AlterField(
            model_name="operadorpuntoventa",
            name="id",
            field=models.AutoField(db_column="id_operador_punto_venta", primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="operadorpuntoventa",
            name="id_empresa",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_puntos_ventas",
                to="coreempresas.empresa",
            ),
        ),
        migrations.AlterField(
            model_name="operadorpuntoventa",
            name="id_operador",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="operador_puntos_venta",
                to="operadores.operador",
            ),
        ),
        migrations.AlterField(
            model_name="sesion",
            name="id",
            field=models.AutoField(db_column="id_sesion", primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="sesion",
            name="id_operador",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="sesion",
                to="operadores.operador",
            ),
        ),
        migrations.AlterField(
            model_name="sesionactiva",
            name="id",
            field=models.AutoField(db_column="id_sesion_activa", primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="sesionactiva",
            name="id_operador",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="sesion_activa",
                to="operadores.operador",
            ),
        ),
        migrations.AlterField(
            model_name="sesionactiva",
            name="id_sesion",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="sesion_activa",
                to="operadores.sesion",
            ),
        ),

        # Eliminamos los campos viejos que aún quedaban en las tablas
        migrations.RemoveField(model_name="operador",      name="empresa"),
        migrations.RemoveField(model_name="operador",      name="grupo"),
        migrations.RemoveField(model_name="operadorgrupo", name="grupo"),
        migrations.RemoveField(model_name="operadorgrupo", name="operador"),
    ]


=== ./migrations/0004_delete_sesionejecutivo.py ===
# Generated by Django 5.1.7 on 2025-04-04 18:11

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('operadores', '0003_sesionactiva_cod_verificacion'),
    ]

    operations = [
        migrations.DeleteModel(
            name='SesionEjecutivo',
        ),
    ]


=== ./views.py ===
# ./operadores/views.py

from __future__ import annotations

import os
import jwt
import secrets
import requests
import crypt                              # misma sal BlowFish heredada
from datetime import datetime, timedelta

from django.conf import settings
from django.core.exceptions import PermissionDenied
from django.db import connection
from django.utils import timezone
from rest_framework import status, viewsets
from rest_framework.decorators import action
from rest_framework.response import Response

from .models import (
    Operador, OperadorBodega, OperadorEmpresaModulo,
    OperadorEmpresaModuloMenu, OperadorGrupo, OperadorPuntoVenta,
    Sesion, SesionActiva
)
from .serializer import (
    OperadorSerializer, OperadorBodegaSerializer,
    OperadorEmpresaModuloSerializer, OperadorEmpresaModuloMenuSerializer,
    OperadorGrupoSerializer, OperadorPuntoVentaSerializer,
    SesionSerializer, SesionActivaSerializer,
    ProveedorSerializer            # ← añadimos import
)
from dm_logistica.models import Proveedor  # ← añadimos import


# ---------------------------------------------------------------------
#  CORS mínimo ─ permite varios orígenes (prod + dev) -----------------
# ---------------------------------------------------------------------
class RestrictToReactMixin:
    """
    Permite la petición solo si la cabecera **Origin** está incluida en
    la lista blanca.  
    · Si el navegador NO envía cabecera Origin (p.e. cURL / Postman)
      la solicitud se acepta.  
    · La lista se puede ampliar vía variable de entorno
      «ALLOWED_CORS_ORIGINS», separada por comas.
    """
    _BASE_ORIGINS = {
        "http://localhost:5173",          # desarrollo local
        "https://desarrollo.smartgest.cl" # build de desarrollo
    }

    # leemos orígenes extra definidos en variables de entorno
    EXTRA_ORIGINS = set(
        origin.strip()
        for origin in os.getenv("ALLOWED_CORS_ORIGINS", "").split(",")
        if origin.strip()
    )

    ALLOWED_ORIGINS = _BASE_ORIGINS | EXTRA_ORIGINS

    def initial(self, request, *args, **kwargs):
        origin = request.META.get("HTTP_ORIGIN")

        # «None» → llamada sin cabecera Origin (Postman, misma página, etc.)
        if origin is not None and origin not in self.ALLOWED_ORIGINS:
            raise PermissionDenied("Acceso denegado por CORS.")

        return super().initial(request, *args, **kwargs)


# ---------------------------------------------------------------------
#  utilidades auxiliares
# ---------------------------------------------------------------------
def enviar_correo_python(
    remitente: str, correo_destino: str, asunto: str, detalle: str
) -> None:
    """Consume el micro‑servicio PHP legado que envía correos."""
    try:
        requests.post(
            "http://mail.smartgest.cl/mailserver/server_mail.php",
            data={
                "destino": correo_destino,
                "asunto":  asunto,
                "detalle": detalle,
                "from":    remitente,
            },
            timeout=8,
        )
    except Exception as exc:                 # pragma: no cover
        print(f"[WARN] Falló el envío de correo: {exc}")


# ---------------------------------------------------------------------
#  VIEWSET PRINCIPAL  (login / 2FA / logout)
# ---------------------------------------------------------------------
class OperadorViewSet(RestrictToReactMixin, viewsets.ModelViewSet):
    queryset = Operador.objects.all()
    serializer_class = OperadorSerializer

    # ============================================================== #
    # 1) LOGIN ------------------------------------------------------ #
    # ============================================================== #
    @action(detail=False, methods=["post"])
    def validar(self, request):
        """
        POST /operadores/operadores/validar/
        """
        username = request.data.get("username")
        password = request.data.get("password")

        if not username or not password:
            return Response(
                {"error": "Se requieren 'username' y 'password'."},
                status=status.HTTP_400_BAD_REQUEST,
            )

        # ───────── validación de credenciales ─────────
        try:
            op = Operador.objects.get(username=username)
        except Operador.DoesNotExist:
            return Response(
                {"error": "No existe un operador con esos datos."},
                status=status.HTTP_404_NOT_FOUND,
            )

        if op.estado != 1:
            return Response(
                {"error": "El usuario no se encuentra activo."},
                status=status.HTTP_403_FORBIDDEN,
            )
        if op.id_empresa.estado != 1:
            return Response(
                {"error": "La empresa asociada al usuario no se encuentra activa."},
                status=status.HTTP_403_FORBIDDEN,
            )
        if op.conexion_fallida > 2:
            return Response(
                {"error": "Ha superado los intentos permitidos (3). Cuenta bloqueada."},
                status=status.HTTP_403_FORBIDDEN,
            )

        # contraseña (hash BlowFish heredado)
        if crypt.crypt(password, op.password) != op.password:
            op.conexion_fallida += 1
            op.save(update_fields=["conexion_fallida"])
            return Response(
                {"error": "Credenciales incorrectas."},
                status=status.HTTP_404_NOT_FOUND,
            )

        # reset de fallos
        if op.conexion_fallida:
            op.conexion_fallida = 0
            op.save(update_fields=["conexion_fallida"])

        # JWT por 24 h
        token = jwt.encode(
            {
                "id":       op.id,
                "username": op.username,
                "exp":      datetime.utcnow() + timedelta(hours=24),
            },
            settings.SECRET_KEY,
            algorithm="HS256",
        )

        # IP real
        ip = request.META.get("HTTP_X_FORWARDED_FOR",
                              request.META.get("REMOTE_ADDR", ""))
        if "," in ip:
            ip = ip.split(",")[0].strip()

        # sesión + 2FA
        sesion = Sesion.objects.create(
            ip=ip,
            fecha=timezone.now(),
            id_operador=op,
            id_empresa=op.id_empresa,
        )
        codigo = secrets.token_hex(16)
        SesionActiva.objects.create(
            id_operador=op,
            id_sesion=sesion,
            id_empresa=op.id_empresa,
            fecha_registro=timezone.now(),
            token=token,
            cod_verificacion=codigo,
        )

        enviar_correo_python(
            "DM", op.username, "Código de Verificación",
            f"Hola, tu código es: {codigo}"
        )

        return Response({"username": op.username}, status=status.HTTP_200_OK)

    # ============================================================== #
    # 2) 2FA / VERIFICAR ------------------------------------------- #
    # ============================================================== #
    @action(detail=False, methods=["post"])
    def verificar(self, request):
        """
        POST /operadores/operadores/verificar/
        """
        username = request.data.get("username")
        codigo   = request.data.get("cod_verificacion")

        if not username or not codigo:
            return Response(
                {"error": "Se requieren 'username' y 'cod_verificacion'."},
                status=status.HTTP_400_BAD_REQUEST,
            )

        sesiones = (
            SesionActiva.objects
            .filter(id_operador__username=username)
            .order_by("-fecha_registro")
        )
        if not sesiones.exists():
            return Response(
                {"error": "No se encontró ninguna sesión activa para este operador."},
                status=status.HTTP_404_NOT_FOUND,
            )

        sesion_reciente = sesiones.first()
        if sesion_reciente.cod_verificacion != codigo:
            return Response(
                {"error": "El código de verificación no coincide."},
                status=status.HTTP_400_BAD_REQUEST,
            )

        op = sesion_reciente.id_operador

        # dejamos solo la sesión validada
        SesionActiva.objects.filter(id_operador=op).exclude(
            id=sesion_reciente.id).delete()

        if op.id_empresa.estado != 1:
            sesion_reciente.delete()
            return Response(
                {"error": "La empresa asociada se encuentra desactivada. Sesión cerrada."},
                status=status.HTTP_403_FORBIDDEN,
            )

        # ------------------ módulos ------------------
        modulos = []
        with connection.cursor() as cur:
            cur.execute(
                """
                SELECT c.nombre_menu,
                       b.id_empresa_modulo,
                       c.icon
                  FROM dm_sistema.operador_empresa_modulos     a
            INNER JOIN dm_sistema.empresa_modulos           b
                    ON a.id_empresa_modulo = b.id_empresa_modulo
            INNER JOIN dm_sistema.modulos                   c
                    ON b.id_modulo         = c.id_modulo
                 WHERE a.id_operador   = %s
                   AND b.estado        = 1
                   AND c.estado        = 1
                   AND b.id_empresa    = %s
              ORDER BY c.orden;
                """,
                [op.id, op.id_empresa_id],
            )
            for nombre_menu, id_em, icon in cur.fetchall():
                modulos.append(
                    {"nombre_menu": nombre_menu, "id": id_em, "icon": icon}
                )

        # ---------------- funcionalidades -------------
        funcionalidades = []
        with connection.cursor() as cur:
            cur.execute(
                """
                SELECT m.id_menu, m.url, m.texto, m.etiqueta, m.descripcion,
                       m.nivel_menu, m.orden, m.modificable, m.separador_up,
                       m.id_modulo
                  FROM dm_sistema.operador                           o
            INNER JOIN dm_sistema.operador_empresa_modulos_menu    oemm
                    ON o.id_operador          = oemm.id_operador
            INNER JOIN dm_sistema.empresa_modulos_menu             emm
                    ON oemm.id_empresa_modulo_menu = emm.id_empresa_modulo_menu
            INNER JOIN dm_sistema.menus                            m
                    ON emm.id_menu            = m.id_menu
                 WHERE o.id_operador = %s;
                """,
                [op.id],
            )
            for row in cur.fetchall():
                funcionalidades.append({
                    "id":           row[0],
                    "url":          row[1],
                    "texto":        row[2],
                    "etiqueta":     row[3],
                    "descripcion":  row[4],
                    "nivel_menu":   row[5],
                    "orden":        row[6],
                    "modificable":  row[7],
                    "separador_up": row[8],
                    "modulo_id":    row[9],
                })

        # --- respuesta + cookie
        resp = Response(
            {
                "message": "Verificación exitosa.",
                "operador":        OperadorSerializer(op).data,
                "modulos":         modulos,
                "funcionalidades": funcionalidades,
            },
            status=status.HTTP_200_OK,
        )
        resp.set_cookie(
            "token",
            sesion_reciente.token,
            httponly=True,
            secure=True,
            max_age=24 * 3600,
            samesite="None",
        )
        return resp

    # ============================================================== #
    # 3) LOGOUT ----------------------------------------------------- #
    # ============================================================== #
    @action(detail=False, methods=["get"])
    def logout(self, request):
        token = request.COOKIES.get("token")
        if not token:
            return Response(
                {"error": "No se encontró la cookie 'token'."},
                status=status.HTTP_401_UNAUTHORIZED,
            )

        sesiones = SesionActiva.objects.filter(token=token).order_by("-fecha_registro")
        if not sesiones.exists():
            return Response(
                {"error": "El token de la cookie no coincide con ninguna sesión activa."},
                status=status.HTTP_404_NOT_FOUND,
            )

        # eliminamos TODAS las sesiones que compartan ese token
        sesiones.delete()

        resp = Response({"message": "Sesión eliminada correctamente."},
                        status=status.HTTP_200_OK)
        resp.delete_cookie("token")
        return resp


# ─────────────────────────────────────────────────────────────────────────────
# NUEVO: ViewSet para Proveedores filtrados por la empresa del operador en sesión
# ─────────────────────────────────────────────────────────────────────────────
class ProveedorEmpresaViewSet(RestrictToReactMixin, viewsets.ReadOnlyModelViewSet):
    """
    GET /operadores/ventas/operadores/proveedores-empresa/
    Devuelve los proveedores cuyo id_empresa coincide con la empresa del operador
    obtenido de la cookie 'token'.
    """
    serializer_class = ProveedorSerializer

    def get_queryset(self):
        token = self.request.COOKIES.get("token")
        sesiones = SesionActiva.objects.filter(token=token).order_by("-fecha_registro")
        if not sesiones.exists():
            return Proveedor.objects.none()
        sesion = sesiones.first()
        # id_empresa puede venir de la propia sesión o del operador
        empresa_id = sesion.id_empresa_id or sesion.id_operador.id_empresa_id
        return Proveedor.objects.filter(id_empresa_id=empresa_id)


# ---------------------------------------------------------------------
#  CRUD SIMPLES (sin cambios)
# ---------------------------------------------------------------------
class OperadorBodegaViewSet(RestrictToReactMixin, viewsets.ModelViewSet):
    queryset = OperadorBodega.objects.all()
    serializer_class = OperadorBodegaSerializer


class OperadorEmpresaModuloViewSet(RestrictToReactMixin, viewsets.ModelViewSet):
    queryset = OperadorEmpresaModulo.objects.all()
    serializer_class = OperadorEmpresaModuloSerializer


class OperadorEmpresaModuloMenuViewSet(RestrictToReactMixin, viewsets.ModelViewSet):
    queryset = OperadorEmpresaModuloMenu.objects.all()
    serializer_class = OperadorEmpresaModuloMenuSerializer


class OperadorGrupoViewSet(RestrictToReactMixin, viewsets.ModelViewSet):
    queryset = OperadorGrupo.objects.all()
    serializer_class = OperadorGrupoSerializer


class OperadorPuntoVentaViewSet(RestrictToReactMixin, viewsets.ModelViewSet):
    queryset = OperadorPuntoVenta.objects.all()
    serializer_class = OperadorPuntoVentaSerializer


class SesionViewSet(RestrictToReactMixin, viewsets.ModelViewSet):
    queryset = Sesion.objects.all()
    serializer_class = SesionSerializer


class SesionActivaViewSet(RestrictToReactMixin, viewsets.ModelViewSet):
    queryset = SesionActiva.objects.all()
    serializer_class = SesionActivaSerializer


# ---------------------------------------------------------------------
#  SESIÓN POR TOKEN ----------------------------------------------------
# ---------------------------------------------------------------------
class OperadorByTokenViewSet(RestrictToReactMixin, viewsets.ViewSet):
    """
    Devuelve la sesión activa (post‑2FA) a partir del token almacenado
    en la cookie 'token'.
    """

    def get_by_cookie(self, request):
        token_cookie = request.COOKIES.get("token")
        if not token_cookie:
            return Response(
                {"error": "No se encontró la cookie 'token'."},
                status=status.HTTP_401_UNAUTHORIZED,
            )

        # -- pueden existir varias filas con el mismo token si el usuario
        #    inició/verificó varias veces; usamos la más reciente y
        #    limpiamos el resto para evitar MultipleObjectsReturned.
        sesiones = (
            SesionActiva.objects
            .select_related("id_operador")
            .filter(token=token_cookie)
            .order_by("-fecha_registro")
        )
        if not sesiones.exists():
            return Response(
                {"error": "El token no coincide con ninguna sesión activa."},
                status=status.HTTP_404_NOT_FOUND,
            )

        sesion_activa = sesiones.first()
        if sesiones.count() > 1:
            sesiones.exclude(id=sesion_activa.id).delete()

        op = sesion_activa.id_operador

        if op.id_empresa.estado != 1:
            sesion_activa.delete()
            return Response(
                {"error": "La empresa asociada al usuario se encuentra desactivada. "
                          "La sesión ha sido cerrada."},
                status=status.HTTP_403_FORBIDDEN,
            )

        # ------------------ módulos ------------------
        modulos = []
        with connection.cursor() as cur:
            cur.execute(
                """
                SELECT c.nombre_menu,
                       b.id_empresa_modulo,
                       c.icon
                  FROM dm_sistema.operador_empresa_modulos     a
            INNER JOIN dm_sistema.empresa_modulos           b
                    ON a.id_empresa_modulo = b.id_empresa_modulo
            INNER JOIN dm_sistema.modulos                   c
                    ON b.id_modulo         = c.id_modulo
                 WHERE a.id_operador = %s
                   AND b.estado      = 1
                   AND c.estado      = 1
                   AND b.id_empresa  = %s
              ORDER BY c.orden;
                """,
                [op.id, op.id_empresa_id],
            )
            for nombre_menu, id_em, icon in cur.fetchall():
                modulos.append(
                    {"nombre_menu": nombre_menu, "id": id_em, "icon": icon}
                )

        # ---------------- funcionalidades -------------
        funcionalidades = []
        with connection.cursor() as cur:
            cur.execute(
                """
                SELECT m.id_menu, m.url, m.texto, m.etiqueta, m.descripcion,
                       m.nivel_menu, m.orden, m.modificable, m.separador_up,
                       m.id_modulo
                  FROM dm_sistema.operador                           o
            INNER JOIN dm_sistema.operador_empresa_modulos_menu    oemm
                    ON o.id_operador          = oemm.id_operador
            INNER JOIN dm_sistema.empresa_modulos_menu             emm
                    ON oemm.id_empresa_modulo_menu = emm.id_empresa_modulo_menu
            INNER JOIN dm_sistema.menus                            m
                    ON emm.id_menu            = m.id_menu
                 WHERE o.id_operador = %s;
                """,
                [op.id],
            )
            for row in cur.fetchall():
                funcionalidades.append({
                    "id":           row[0],
                    "url":          row[1],
                    "texto":        row[2],
                    "etiqueta":     row[3],
                    "descripcion":  row[4],
                    "nivel_menu":   row[5],
                    "orden":        row[6],
                    "modificable":  row[7],
                    "separador_up": row[8],
                    "modulo_id":    row[9],
                })

        return Response(
            {
                "sesion_activa":   SesionActivaSerializer(sesion_activa).data,
                "operador_data":   OperadorSerializer(op).data,
                "modulos":         modulos,
                "funcionalidades": funcionalidades,
            },
            status=status.HTTP_200_OK,
        )

=== ./models.py ===
from django.db import models
from django.utils import timezone

from coreempresas.models  import Grupo, Empresa
from configuracion.models import EmpresaModulo, EmpresaModuloMenu

# ---------------------------------------------------------------------
#  MODELO  : Operador
# ---------------------------------------------------------------------
class Operador(models.Model):
    id                   = models.AutoField(primary_key=True, db_column='id_operador')
    username             = models.CharField(max_length=50)
    password             = models.CharField(max_length=80, default='')
    clear                = models.CharField(max_length=80,  null=True, blank=True)
    rut                  = models.CharField(max_length=15,  null=True, blank=True)
    nombres              = models.CharField(max_length=100, null=True, blank=True)
    apellido_paterno     = models.CharField(max_length=100, null=True, blank=True)
    apellido_materno     = models.CharField(max_length=100, null=True, blank=True)
    modificable          = models.IntegerField(default=1)
    email                = models.CharField(max_length=50,  null=True, blank=True)
    estado               = models.IntegerField(default=1)
    acceso_web           = models.IntegerField(default=0)
    conexion_fallida     = models.IntegerField(default=0)
    operador_administrador = models.CharField(max_length=50, default='0')
    id_grupo             = models.ForeignKey(Grupo,   on_delete=models.RESTRICT, null=True, blank=True, related_name='operadores', db_column='id_grupo')
    id_empresa           = models.ForeignKey(Empresa, on_delete=models.RESTRICT, related_name='operadores', db_column='id_empresa')
    superadmin           = models.IntegerField(default=0)
    fecha_creacion       = models.DateTimeField(default=timezone.now)

    class Meta:
        db_table = '"dm_sistema"."operador"'
        indexes  = [
            models.Index(fields=['id_empresa'], name='idx_opr_emp_id'),
            models.Index(fields=['id_grupo'],   name='idx_opr_grp_id'),
        ]

    def __str__(self):
        return self.username


# ---------------------------------------------------------------------
#  MODELO  : OperadorBodega
# ---------------------------------------------------------------------
class OperadorBodega(models.Model):
    id           = models.AutoField(primary_key=True, db_column='id_operador_bodega')
    id_operador  = models.ForeignKey(Operador, on_delete=models.RESTRICT, related_name='bodegas', db_column='id_operador')
    id_bodega    = models.IntegerField()
    id_empresa   = models.ForeignKey(Empresa,  on_delete=models.RESTRICT, related_name='operador_bodegas', db_column='id_empresa')

    class Meta:
        db_table = '"dm_sistema"."operador_bodega"'
        indexes  = [
            models.Index(fields=['id_bodega'],  name='idx_opbdg_bdg_id'),
            models.Index(fields=['id_empresa'], name='idx_opbdg_emp_id'),
            models.Index(fields=['id_operador'], name='idx_opbdg_opr_id'),
        ]

    def __str__(self):
        return f'{self.id_operador} - Bodega {self.id_bodega}'


# ---------------------------------------------------------------------
#  MODELO  : OperadorEmpresaModulo
# ---------------------------------------------------------------------
class OperadorEmpresaModulo(models.Model):
    id                = models.AutoField(primary_key=True, db_column='id_operador_empresa_modulo')
    id_operador       = models.ForeignKey(Operador,      on_delete=models.RESTRICT, related_name='operador_empresa_modulos', db_column='id_operador')
    id_empresa_modulo = models.ForeignKey(EmpresaModulo, on_delete=models.RESTRICT, related_name='operador_empresa_modulos', db_column='id_empresa_modulo')

    class Meta:
        db_table = '"dm_sistema"."operador_empresa_modulos"'
        indexes  = [
            models.Index(fields=['id_operador'],       name='idx_oem_opr_id'),
            models.Index(fields=['id_empresa_modulo'], name='idx_oem_em_id'),
        ]

    def __str__(self):
        return f'{self.id_operador} - {self.id_empresa_modulo}'


# ---------------------------------------------------------------------
#  MODELO  : OperadorEmpresaModuloMenu
# ---------------------------------------------------------------------
class OperadorEmpresaModuloMenu(models.Model):
    id                     = models.AutoField(primary_key=True, db_column='id_operador_empresa_modulo_menu')
    id_operador            = models.ForeignKey(Operador,           on_delete=models.RESTRICT, related_name='operador_empresa_modulos_menus', db_column='id_operador')
    id_empresa_modulo_menu = models.ForeignKey(EmpresaModuloMenu,  on_delete=models.RESTRICT, related_name='operador_empresa_modulos_menus', db_column='id_empresa_modulo_menu')

    class Meta:
        db_table = '"dm_sistema"."operador_empresa_modulos_menu"'
        indexes  = [
            models.Index(fields=['id_operador'],            name='idx_oemm_opr_id'),
            models.Index(fields=['id_empresa_modulo_menu'], name='idx_oemm_mm_id'),
        ]

    def __str__(self):
        return f'{self.id_operador} - {self.id_empresa_modulo_menu}'


# ---------------------------------------------------------------------
#  MODELO  : OperadorGrupo
# ---------------------------------------------------------------------
class OperadorGrupo(models.Model):
    id          = models.AutoField(primary_key=True, db_column='id_operador_grupo')
    id_operador = models.ForeignKey(Operador, on_delete=models.RESTRICT, related_name='operadores_grupo', db_column='id_operador')
    id_grupo    = models.ForeignKey(Grupo,    on_delete=models.RESTRICT, related_name='operadores_grupo', db_column='id_grupo')

    class Meta:
        db_table = '"dm_sistema"."operador_grupos"'
        indexes  = [
            models.Index(fields=['id_operador'], name='idx_opgr_opr_id'),
            models.Index(fields=['id_grupo'],    name='idx_opgr_grp_id'),
        ]

    def __str__(self):
        return f'{self.id_operador} - {self.id_grupo}'


# ---------------------------------------------------------------------
#  MODELO  : OperadorPuntoVenta
# ---------------------------------------------------------------------
class OperadorPuntoVenta(models.Model):
    id           = models.AutoField(primary_key=True, db_column='id_operador_punto_venta')
    id_operador  = models.ForeignKey(Operador, on_delete=models.RESTRICT, related_name='operador_puntos_venta', db_column='id_operador')
    id_punto_venta = models.IntegerField()
    id_empresa   = models.ForeignKey(Empresa,  on_delete=models.RESTRICT, related_name='operador_puntos_ventas', db_column='id_empresa')

    class Meta:
        db_table = '"dm_sistema"."operador_punto_venta"'
        indexes  = [
            models.Index(fields=['id_empresa'],     name='idx_opv_emp_id'),
            models.Index(fields=['id_punto_venta'], name='idx_opv_pv_id'),
            models.Index(fields=['id_operador'],    name='idx_opv_opr_id'),
        ]

    def __str__(self):
        return f'{self.id_operador} - Punto de Venta {self.id_punto_venta}'


# ---------------------------------------------------------------------
#  MODELO  : Sesion
# ---------------------------------------------------------------------
class Sesion(models.Model):
    id          = models.AutoField(primary_key=True, db_column='id_sesion')
    ip          = models.CharField(max_length=20)
    fecha       = models.DateTimeField()
    id_operador = models.ForeignKey(Operador, on_delete=models.RESTRICT, related_name='sesion', db_column='id_operador')
    id_empresa  = models.ForeignKey(Empresa,  on_delete=models.RESTRICT, null=True, blank=True, db_column='id_empresa')

    class Meta:
        db_table = '"dm_sistema"."sesiones"'
        indexes  = [
            models.Index(fields=['id_empresa'],  name='idx_ses_emp_id'),
            models.Index(fields=['id_operador'], name='idx_ses_opr_id'),
        ]

    def __str__(self):
        return f'Sesion {self.id} - {self.ip}'


# ---------------------------------------------------------------------
#  MODELO  : SesionActiva
# ---------------------------------------------------------------------
class SesionActiva(models.Model):
    id            = models.AutoField(primary_key=True, db_column='id_sesion_activa')
    id_empresa    = models.ForeignKey(Empresa,  on_delete=models.RESTRICT, null=True, blank=True, db_column='id_empresa')
    id_operador   = models.ForeignKey(Operador, on_delete=models.RESTRICT, related_name='sesion_activa', db_column='id_operador')
    id_sesion     = models.ForeignKey(Sesion,   on_delete=models.RESTRICT, related_name='sesion_activa', db_column='id_sesion')
    fecha_registro = models.DateTimeField(default=timezone.now)

    token          = models.CharField(max_length=255, null=True, blank=True)
    cod_verificacion = models.CharField(max_length=255, null=True, blank=True)

    class Meta:
        db_table = '"dm_sistema"."sesiones_activas"'
        indexes  = [
            models.Index(fields=['id_sesion'],   name='idx_sact_sid'),
            models.Index(fields=['id_empresa'],  name='idx_sact_emp_id'),
            models.Index(fields=['id_operador'], name='idx_sact_opr_id'),
        ]

    def __str__(self):
        return f'Sesion Activa {self.id}'


=== ./tests.py ===
from django.test import TestCase

# Create your tests here.


=== ./combined.txt ===


=== ./apps.py ===
from django.apps import AppConfig


class OperadoresConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'operadores'
